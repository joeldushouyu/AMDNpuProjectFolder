import numpy as np
import sys

from aie.dialects.aie import *
from aie.dialects.aiex import *
from aie.extras.context import mlir_mod_ctx
from aie.helpers.dialects.ext.scf import _for as range_


import numpy as np
import sys

from ml_dtypes import bfloat16
from aie.extras.context import mlir_mod_ctx
from aie.dialects.aie import *
from aie.dialects.aiex import *
from aie.helpers.dialects.ext.scf import _for as range_

#given a 512x512 matrix size and 512x`1 vector




def single_mat_mul():
    
    # only for npu2
    dev = AIEDevice.npu2
    
    M = 512
    K = 512
    
    # divie the big matrix to 128x128 size matrix
    m = 128
    k = 128
    K_div_k = K // k
    m_x_k = m * k
    m_x_K = m * K
    dtype_in = np.dtype[np.int8]
    dtype_out = np.dtype[np.int32]
    with mlir_mod_ctx() as ctx:

        @device(AIEDevice.npu2)
        def device_body():
            A_shim_mt_ty = np.ndarray[( m * k,), dtype_in]
            A_ty = np.ndarray[(m, k), dtype_in]  #TODO: why not use A_shim_mt_ty instead?
            inB_ty = np.ndarray[(k,), dtype_in]
            outC_ty = np.ndarray[( m,), dtype_out]
            C_ty = np.ndarray[(m, ), dtype_out]
            
            zero = external_func("zero_m_int8", inputs=[C_ty])
            matvec = external_func(
                "mv_int8",
                inputs=[A_ty, inB_ty, C_ty],
            )
            
            
            shimTiles  = [tile( 0,0)] # column 0
            MemTiles  = [tile(0,1)]
            cores = [tile(0,2)]
            # one shimtile, 
            # one memory tile
            # one CT for calculation

            # A_SHM_MT
            memA_fifos = [object_fifo(
                "A_SHM_MT", shimTiles[0], MemTiles[0], 2, A_shim_mt_ty
            )]

            CTA_fifos = [
                object_fifo("A_MT_CT", MemTiles[0], cores[0], 2, A_ty,
                            ([(k//4,4), (m,k), (4,1)]))
            ]
            # link
            object_fifo_link(memA_fifos[0],  CTA_fifos[0])
            # B
            memB_fifos = [
                object_fifo(
                    "B_SHM_MT", shimTiles[0], MemTiles[0], 2, inB_ty
                )
            ]
            CTB_fifos = [
                object_fifo("B_MT_CT", MemTiles[0], cores[0], 2, inB_ty)
            ]
            object_fifo_link(memB_fifos[0],  CTB_fifos[0])
            # OUTput C
            output_C_fifos = [
                object_fifo("C_CT_MT", cores[0], MemTiles[0], 2, C_ty)
            ]
            mem_C_fifos = [
                object_fifo("C_MT_SHM", MemTiles[0], shimTiles[0], 2, outC_ty)
            ]
            object_fifo_link(output_C_fifos[0],  mem_C_fifos[0])
            rtp_buffer = buffer(cores[0], np.ndarray[(16, ), dtype_out], "rtp_buffer", use_write_rtp=True)
            
            
            # core logic
            @core(cores[0], "mvm_i8.o")
            def core_body():
                for _ in range_(0xFFFFFFFF):
                    ele_out = output_C_fifos[0].acquire(ObjectFifoPort.Produce, 1)
                    zero(ele_out)

                    for _ in range_(K_div_k):
                        elem_in_a = CTA_fifos[0].acquire(ObjectFifoPort.Consume, 1)
                        elem_in_b = CTB_fifos[0].acquire(ObjectFifoPort.Consume, 1)

                        matvec(elem_in_a, elem_in_b, ele_out)
                        
                        CTA_fifos[0].release(ObjectFifoPort.Consume, 1)
                        CTB_fifos[0].release(ObjectFifoPort.Consume, 1)

                    output_C_fifos[0].release(ObjectFifoPort.Produce, 1)

            @runtime_sequence(
                np.ndarray[(M*K,), dtype_in],
                np.ndarray[(K,), dtype_in],
                np.ndarray[(M,), dtype_out],
            )
            def sequenc(A, B, C):
                r = M // m 
                assert r * m  == M
                rtp_buffer[0] = 1
                npu_dma_memcpy_nd(
                    metadata=memB_fifos[0],
                    bd_id=2,
                    mem=B,
                    offsets=[0, 0, 0, 0],
                    sizes=[M // m , 1, 1, K],
                    strides=[0, 0, 0, 1],
                )

                # M offset: each column handles M // mvm_cols row in total
                A_offset = 0
                C_offset = 0
                npu_dma_memcpy_nd(
                    metadata=memA_fifos[0],
                    bd_id=1,
                    mem=A,
                    offsets=[0, 0, 0, A_offset],
                    sizes=[M  // (m), K_div_k,  m, k],
                    strides=[m_x_K, k, K, 1],
                )
                npu_dma_memcpy_nd(
                    metadata=mem_C_fifos[0],
                    bd_id=0,
                    mem=C,
                    offsets=[0, 0, 0, C_offset],
                    sizes=[1, 1, M // m, m],
                    strides=[0, 0,  m, 1],
                )
                dma_wait(*mem_C_fifos)
    
    
    print(ctx.module)
    
    
single_mat_mul()